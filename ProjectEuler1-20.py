# -*- coding: utf-8 -*-
"""
Created on Fri Jan  1 15:42:20 2021

@author: catal
"""
import pdb 
import math

"""
Problem 1

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
"""
def SumOf3Or5(ceiling):
    pdb.set_trace()
    the_sum = 0
    for num in range(ceiling):
        if (num % 3 == 0) or (num % 5 == 0):
            the_sum += num
    print(the_sum)
    
print(SumOf3Or5(1000))

"""
Problem 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.
"""

#make list if fibonacci numbers, make list of even fibonacci numbers
    #start with fib[0]=1 and fib[1]=2
    #calc fib[i]= fib[i-1] + fib[i-2]

    #add fib[i] to all_fib_list
    #if fib[i] % 2 == 0:
        #add fib[i] to even_fib_list
#even_fib_sum_value = sum(even_fib_list)

def SumEvenFibonacci(ceiling):
    fib_list = [1,2]
    even_fib_list = [2]
    while fib_list[-1] < ceiling:
        new_fib = fib_list[-1] + fib_list[-2]
        if new_fib <= ceiling:
            fib_list.append(new_fib)
            if new_fib % 2 == 0:
                even_fib_list.append(new_fib)
        else:
            break
    even_fib_sum = sum(even_fib_list)
    print(even_fib_sum)

# SumEvenFibonacci(4000000)

"""
problem 3
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
"""

def findLargestPrimeFactor(number):
    #find prime factorization of num
    prime_factors_list = []
    while number % 2 == 0:
       prime_factors_list.append(2)
       number = number / 2
    for i in range(3, int(math.sqrt(number)) + 1, 2):
        while number % i == 0:
            prime_factors_list.append(int(i))
            number = number / i
    if number > 2:
        prime_factors_list.append(int(number))
    largest_prime = max(prime_factors_list)
    print(largest_prime)

#findLargestPrimeFactor(600851475143)


"""
problem 4
A palindromic number reads the same both ways. 
The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
"""

def LargestPalindromeTwoDigitProduct():
    #make list of all products of 2 digit numbers
    for num1 in range(10,100):
        for num2 in range(10,100):
            product = num1 * num2
            #test if product is palindrome
            product_string = str(product)
            if product_string[:] == product_string[::-1]:
                largest_palindrome = product
    print(largest_palindrome)

def LargestPalindromeThreeDigitProduct():
    #make list of all products of 3 digit numbers
    largest_palindrome = False
    for num1 in range(100,1000):
        for num2 in range(100,1000):
            product = num1 * num2
            #test if product is palindrome
            product_string = str(product)
            if product_string[:] == product_string[::-1]:
                if (largest_palindrome == False) or (product > largest_palindrome):
                    largest_palindrome = product
    print(largest_palindrome)
    
def LargestPalindromeXDigitProduct(X):
    """finds the largest number that is both 
    1.the product of two X digit long numbers
    2. a palindrone 
    """
    #define num_range
    a = 10**(X-1)
    b = 10**(X)
    num_range = range(a,b)
    #make list of all products of 3 digit numbers
    largest_palindrome = False
    for num1 in num_range:
        for num2 in num_range:
            product = num1 * num2
            #test if product is palindrome
            product_string = str(product)
            if product_string[:] == product_string[::-1]:
                #test if palindrone is larger than previously found palindrone 
                if (largest_palindrome == False) or (product > largest_palindrome):
                    largest_palindrome = product
    print(largest_palindrome)

# LargestPalindromeTwoDigitProduct()
# LargestPalindromeThreeDigitProduct()
# LargestPalindromeXDigitProduct(2)
# LargestPalindromeXDigitProduct(3)

"""
problem 5

2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
"""

def smallestDivisible1to20():
    found_divisible = False 
    num = 20
    while found_divisible == False:
        if (num%2 == 0) and (num%3 == 0) and (num%3 == 0)and (num%4 == 0)and (num%5 == 0)and (num%6 == 0) and (num%7 == 0)and (num%8== 0)and (num%9 == 0)and (num%10 == 0)and (num%11== 0)and (num%12 == 0)and (num%13 == 0)and (num%14 == 0)and (num%15 == 0)and (num%16 == 0)and (num%17 == 0)and (num%18 == 0)and (num%19 == 0)and (num%20 == 0):
            divisible = num
            found_divisible = True
        else:
            num += 20
    return divisible 

def smallestDivisible1to10():
    found_divisible = False 
    num = 10
    while found_divisible == False:
        if (num%2 == 0) and (num%3 == 0) and (num%3 == 0)and (num%4 == 0)and (num%5 == 0)and (num%6 == 0) and (num%7 == 0)and (num%8== 0)and (num%9 == 0)and (num%10 == 0):
            divisible = num
            found_divisible = True
        else:
            num += 10
    return divisible 


# print(smallestDivisible1to20())
# print(smallestDivisible1to10())

"""
problem 5

The sum of the squares of the first ten natural numbers is,
(1**2 + 2**2 + 3**2 + 4**2 + 5**2 + 6**2 + 7**2  + 8**2 + 9**2 + 10**2) = 385

The square of the sum of the first ten natural numbers is,
(1=+2+3+4+5+6+7+8+9+10)**2 = 55**2=3025

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is .
3025 - 385 = 2640

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

"""

def sumOfSquaresMinusSquareofSum(ceiling):
    """ceiling is assumed to be an int, the number up to which we are adding"""
    #calc a = sum of (squares) up to n 
    sum_of_squares = 0
    for num in range(ceiling+1):
        squared_num = num**2
        sum_of_squares += squared_num
    #calc b = square of (sum of num up to n)
    square_of_sum = (sum(range(ceiling+1)))**2
    #calc b-a 
    diffrence = square_of_sum - sum_of_squares
    return diffrence

# print(sumOfSquaresMinusSquareofSum(100))

"""
problem 6
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?
"""


def nPrime(n):
    """finds the nth prime number. Very straighforward, no optimizations."""
    prime_list = []
    num = 2
    while len(prime_list) <= n:
        is_prime = True
        for i in range(2,num):
            if num % i == 0:
                is_prime = False 
        if is_prime == True:
            prime_list.append(num)
        num += 1
        print(len(prime_list))
    return prime_list[n-1]
        

# print(nPrime(10001))

"""
problem 7
The four adjacent digits in the 1000-digit number that have the greatest product are 
9 × 9 × 8 × 9 = 5832.

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. 
What is the value of this product?
"""

def findMaxAdjacentProduct(adjacent_num):
    thousand_digit_num = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
    thousand_digit_list = [int(x) for x in str(thousand_digit_num)]
    max_adjacent_product = 0
    for i in range(len(thousand_digit_list)-12):
        a_product = 1
        for num in range(adjacent_num):
            a_product = a_product * thousand_digit_list[i+num]
            if a_product > max_adjacent_product:
                max_adjacent_product = a_product
    return max_adjacent_product
    

# print(findMaxAdjacentProduct(13))

"""
Problem 9
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
a**2 + b**2 = c**2

For example, 3**2 + 4**2 = 9 + 16 = 25 = 5**2.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
"""

def findPythagoreanTriplet(the_sum):
    """returns the product of a*b*c 
    where a,b,c are a triplet of ints that 
    1. satisfy the pythagoean theorem a**2 + b**2 = c**2
    and
    2. a+b+c=the_sum
    """
    for a in range(1,the_sum-2):
        for b in range(1,the_sum-2):
            c = (a**2 + b**2)**0.5
            if a+b+c == the_sum:
                print([a,b,c])
                print(a*b*c)
                return a*b*c

# findPythagoreanTriplet(1000)

"""
problem 10
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.
"""

def sumPrimes(up_to):
    """finds the sum of primes up to up_to. Very straighforward, no optimizations."""
    prime_list = [2]
    num = 3
    while (prime_list[-1] < up_to):
        is_prime = True
        for i in prime_list:
            if num % i == 0:
                is_prime = False 
        if is_prime == True:
            prime_list.append(num)
        num += 2
        print(prime_list[-1])
    return (sum(prime_list)) -prime_list[-1]

# print(sumPrimes(2000000))

"""
problem 10
In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

What is the greatest product of four adjacent numbers in the same direction
 (up, down, left, right, or diagonally) in the 20×20 grid?
"""

def buildGrid():
    """builds list of lists to represent 20x20 grid"""
    #strings of numbers
    str1 = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08"
    str2 = "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00"
    str3 = "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65"
    str4 = "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91"
    str5 = "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80"
    str6 = "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50"
    str7 = "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70"
    str8 = "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21"
    str9 = "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72"
    str10 = "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95"
    str11 = "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92"
    str12 = "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57"
    str13 = "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58"
    str14 = "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40"
    str15 = "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66"
    str16 = "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69"
    str17 = "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36"
    str18 = "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16"
    str19 = "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54"
    str20 = "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"
    #convert strings to lists of ints
    str_list = [str1,str2,str3,str4,str5,str6,str7,str8,str9,str10,str11,str12,str13,str14,str15,str16,str17,str18,str19,str20]
    #create grid, a list of lists of ints
    the_grid = []
    for string in str_list:
        an_int_list = [int(x) for x in string.split()]
        the_grid.append(an_int_list)
    return the_grid

def greatestGridProduct(grid):
    """taked  grid, list of lists of ints 20x20 large
    calculates the largest possible product of 4 adjacent ints
    ints are considered adjacent if the are consecutive on the same row,
    or consecutive in the same column, or consecutive in a diagonal
    returns the largest product of four consecutive ints"""
    slices = []
    great_product = 0 
    #define row slices
    for i in range(20):
        for j in range(17):
            row_slice = [grid[i][j], grid[i][j+1],grid[i][j+2],grid[i][j+3]]
            slices.append(row_slice)
    #define colums slices
    for i in range(17):
        for j in range(20):
            column_slice = [grid[i][j],grid[i+1][j],grid[i+2][j],grid[i+3][j]]
            slices.append(column_slice)
    #define left diagonal slices
    for i in range(17):
        for j in range(17):
            rdiag_slice = [grid[i][j],grid[i+1][j+1],grid[i+2][j+2],grid[i+3][j+3]]
            slices.append(rdiag_slice)
    #define right diagonal slices
    for i in range(19,2,-1):
        for j in range(17):
            # print([(i,j)])
            ldiag_slice = [grid[i][j],grid[i-1][j+1],grid[i-2][j+2],grid[i-3][j+3]]
            slices.append(ldiag_slice)
    #test slices
    for elem in slices:
        slice_product = elem[0] * elem[1] * elem[2] * elem[3]
        if slice_product > great_product:
            great_product = slice_product 
    return great_product
            

# print(greatestGridProduct(buildGrid()))

"""
problem 12

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

from functools import reduce

def factors(n):    
    """finds all the factors (not just prime factors) of a given number n"""
    return set(reduce(list.__add__, 
                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))


def triangularNumbersDivisor(divisor):
    """
    assumes divisor is an int, the number of factors a number has
    finds the lowest triangular number that has divisor amount of factors 
    (note, factors, not prime factors)
    uses helper function factors() to calculate the factors of each triangular number
    the ith triangular number is defined as the sum of natural numbers up to i
    e.g. 7th triangular number is 1+2+3+4+5+6+7 = 28 
    """
    #calc triangular numbers 
    triangular_num_list = [0]
    found_divisor = False
    i = 1
    while found_divisor == False:
        triangular_num = sum(range(i+1))
        triangular_num_list.append(triangular_num)
        i += 1
        #calc factors of triangular_num
        factors_list = factors(triangular_num)
        #test if num with divisor found
        if len(factors_list) > divisor:
            found_divisor = True
    return triangular_num

# print(triangularNumbersDivisor(500))

"""
problem 13
Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690
"""

def makeList(file_name):
    """assumes file_name.txt is a txt file,
    where each line is a sequence of digits representing an int
    converts the block of text to a list of ints"""
    file = open(file_name)
    file_list = file.readlines()
    file.close()
    int_list = [int(i) for i in file_list] 
    return int_list

def sumList(int_list):
    """assumes alist is a list of ints
    takes the sum of a list of ints"""
    return sum(int_list)

def first10(an_int):
    """assumes an_int is an int, at least 10 digits long
    returns the first 10 digits of an_int"""
    int_str = str(an_int)
    return int_str[0:10]

def firstX(an_int, X):
    """assumes an_int is an int at least X digits long
    assumes X is an int
    returns the first X digits of an_int"""
    int_str = str(an_int)
    return int_str[0:X]

# problem13File = "ProjectEulerProblem13.txt"
# makeList(problem13File)
# # print(sumList(makeList(problem13File)))
# print(first10((sumList(makeList(problem13File)))))
# print(firstX((sumList(makeList(problem13File))),10))
# print(firstX((sumList(makeList(problem13File))),5))

"""
problem 14

The following iterative sequence is defined for the set of positive integers:

n → n/2 (n is even)
n → 3n + 1 (n is odd)

Using the rule above and starting with 13, we generate the following sequence:

13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms.
 Although it has not been proved yet (Collatz Problem), 
 it is thought that all starting numbers finish at 1.

Which starting number, under one million, produces the longest chain?

NOTE: Once the chain starts the terms are allowed to go above one million.
"""

def CollatzRules(Collatz_num):
    """assumes CollatzNum is an int > 0
    applies the Collatz Rules to Collatz_num
    returns the next number in the Collatz Sequence, an int"""
    if Collatz_num % 2 == 0:
        return int(Collatz_num /2)
    else:
        return (Collatz_num*3)+1

# num = CollatzRules(13)
# while num != 1:
#     print(num)
#     num = CollatzRules(num)
# print(1)

# CollatzRules(10)

def findLargestCollatz(max_num):
    """assumes max_num is an int, the largest starting number considered
    returns the int that produces the longest Collatz sequence"""
    #innitialize variables
    max_collatz_lenght = 0 
    #iterates over all considered starting numbers
    for num in range(1,(max_num+1)):
        collatz_list = [num]
        collatz_num = num
        #follows collatz rules to end of 1
        while collatz_num != 1:
            collatz_num = CollatzRules(collatz_num)
            collatz_list.append(collatz_num)
        collatz_lenght = len(collatz_list)
        #if latest starting number creates a longer sequence, max_collats_num is updated
        if collatz_lenght > max_collatz_lenght:
            max_collatz_lenght = collatz_lenght
            max_collatz_num = num 
        #prints current num to prevent the underinformed from stoping the long run time
        print(num)
    return max_collatz_num 
        
# print(findLargestCollatz(1000000))

"""
Problem 15
Starting in the top left corner of a 2×2 grid, 
and only being able to move to the right and down, 
there are exactly 6 routes to the bottom right corner.


How many such routes are there through a 20×20 grid?
"""

def findNumPaths(grid_size):
    """assumes grid_size is an int
    for a grid/lattice NxN large
    returns an int, the number of possible ways to traverse the lattice. 
    """
    
    n = grid_size+grid_size
    k = grid_size
    numerator = math.factorial(n)
    denumerator = math.factorial(k) * math.factorial(n-k)
    num_choices = numerator / denumerator
    return num_choices

# print(findNumPaths(20))

"""
problem 16
2**15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.

What is the sum of the digits of the number 2**1000?
"""
def TwotoThePowerOf(exponent):
    """ assumes exponent is an int
    returns an int = 2**exponent """
    new_num = 2**exponent
    return new_num

def sumDigits(num):
    """assuments num is an int
    returns the sum of the digits of num"""
    num_list = list(str(num))
    num_list = [int(x) for x in num_list]
    return sum(num_list)



# TwotoThePowerOf(15)
# print(sumDigits(TwotoThePowerOf(15)))
# print(sumDigits(TwotoThePowerOf(1000)))


"""
problem 16
If the numbers 1 to 5 are written out in words: 
    one, two, three, four, five, 
    then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.

If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, 
how many letters would be used?


NOTE: Do not count spaces or hyphens. 
For example, 342 (three hundred and forty-two) contains 23 letters and 
115 (one hundred and fifteen) contains 20 letters. 
The use of "and" when writing out numbers is in compliance with British usage.
"""
def convertToLetters(num):
    """assumes num is an int
    returns a string writting out the int in words, without spaces nor hyphens
    e.g. input 342, returns "threehundredandfortytwo"
    """
    single_digit_list = ["zero","one","two", "three","four","five","six","seven","eight","nine"]
    
    noughts_list = ["","one","two", "three","four","five","six","seven","eight","nine"]
    tens_list = ["ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]
    twenties_list = ["twenty"]
    thirties_list = ["thirty"]
    forties_list =["forty"]
    fifties_list = ["fifty"]
    sixties_list = ["sixty"]
    seventies_list = ["seventy"]
    eighties_list = ["eighty"]
    nineties_list = ["ninety"]
    for elem in range (21,30):
        twenties_list.append("twenty" + single_digit_list[elem-20])
    for elem in range (31,40):
        thirties_list.append("thirty" + single_digit_list[elem-30])
    for elem in range(41,50):
        forties_list.append("forty" + single_digit_list[elem-40])
    for elem in range(51,60):
        fifties_list.append("fifty" + single_digit_list[elem-50])
    for elem in range(61,70):
        sixties_list.append("sixty" + single_digit_list[elem-60])
    for elem in range(71,80):
        seventies_list.append("seventy" + single_digit_list[elem-70])
    for elem in range(81,90):
        eighties_list.append("eighty" + single_digit_list[elem-80])
    for elem in range(91,100):
        nineties_list.append("ninety" + single_digit_list[elem-90])
    hundreds_list = noughts_list + tens_list + twenties_list + thirties_list + forties_list + fifties_list + sixties_list + seventies_list + eighties_list + nineties_list


    if num == 0:
        word = "zero"
    if num in range(1,100):
        word = hundreds_list[num]
    if num == 100:
        word = "onehundred"
    if num in range (101,200):
        word = "onehundredand" + hundreds_list[num-100]
    if num == 200:
        word = "twohundred"
    if num in range (201,300):
        word = "twohundredand" + hundreds_list[num-200]
    if num == 300:
        word = "threehundred"
    if num in range (301,400):
        word = "threehundredand" + hundreds_list[num-300]
    if num == 400:
        word = "fourhundred"
    if num in range (401,500):
        word = "fourhundredand" + hundreds_list[num-400]
    if num == 500:
        word = "fivehundred"
    if num in range (501,600):
        word = "fivehundredand" + hundreds_list[num-500]
    if num == 600:
        word = "sixhundred"
    if num in range (601,700):
        word = "sixhundredand" + hundreds_list[num-600]
    if num == 700:
        word = "sevenhundred"
    if num in range (701,800):
        word = "sevenhundredand" + hundreds_list[num-700]
    if num == 800:
        word = "eighthundred"
    if num in range (801,900):
        word = "eighthundredand" + hundreds_list[num-800]
    if num == 900:
        word = "ninehundred"
    if num in range (901,1000):
        word = "ninehundredand" + hundreds_list[num-900]
    if num == 1000:
        word = "onethousand"
    return word

def countsNumberWordLetters(max_number):
    #innitialize a list with ints up to max_number, and letter counter
    int_list = []
    for i in range(1,max_number+1):
        int_list.append(i)
    total_letter_count = 0 
    #iterate over int words and add their lenght to the count
    for elem in int_list:
        elem_word_lenght = len(convertToLetters(elem))
        total_letter_count += elem_word_lenght
    return total_letter_count
        

# print(convertToLetters(342))
# print(countsNumberWordLetters(1000))

# for num in range(497):
    # print(convertToLetters(num))

"""
problem 18
By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

   3
  7 4
 2 4 6
8 5 9 3

That is, 3 + 7 + 4 + 9 = 23.

num empty spaces = total_rows - current_row_num -1 
here:total_rows = 4
0th row spaces = 3 =  4-0-1
1th row spaces = 2 =  4-1-1
2th row spaces = 1 =  4-2-1
4th row spaces = 0 =  4-3-1


Find the maximum total from top to bottom of the triangle below:

75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23


NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)
"""

#build representation of triangle
#triangle = list of lists with rows = i, elements of a row = j
#for each element trangle[i][j], adjacent elements of next row are triange[i+1][j] and triangle[i+1][j+1]


def makeTriangle(file_name):
    """assumes file_name.txt is a txt file,
    where each line is a sequence of digits and spaces representing an= sequece of ints
    converts the block of text to a list of lists of ints
    for each element trangle[i][j], adjacent elements of next row are 
    triange[i+1][j] and triange[i+1][j+1]
    """
    #import file
    file = open(file_name)
    file_list = file.readlines()
    file.close()
    #split file into list of strings
    string_list = [i.split() for i in file_list]
    #convert list of strings to list of ints
    int_list_list = []
    for sub_list in string_list:
        sub_int_list = [int(i) for i in sub_list] 
        int_list_list.append(sub_int_list)
    return int_list_list

# print(makeTriangle("ProjectEulerProblem18.txt"))
# test_triangle = ((makeTriangle("ProjectEulerProblem18TestTriangle.txt")))
# print(test_triangle[0][0])
# print(len(makeTriangle("ProjectEulerProblem18.txt")))
# print(len(makeTriangle("ProjectEulerProblem18TestTriangle.txt")))

def calcTriangleSum(triangle_values):
    """assumes triangle_values is a list of values of a path
    returns the sum of the list
    """
    TriangleSum = 0
    for node in triangle_values:
        TriangleSum += node
    return TriangleSum


def getTriangleValues(aTriangle,path):
    """assumes path is a list of tuple (i,j)
    assumes aTriangle is a list of lists of ints, a representation of a root first binary tree
    path represents a path down aTriangle
    i represents the index of the outer list aTriangle
    j represent the index of the inner list aTriangle
    such that aTriangle[i][j] references a value in aTriangle
    returns a list of the values represented by path
    """
    triangle_values = []
    for elem in path:
        triangle_values.append(aTriangle[elem[0]][elem[1]])
    return triangle_values 

# print(calcTriangleSum([1,3,5]))


def getBestPathValue(aTriangle, start, path, best_value, best_path):
    """
    Finds the shortest path between buildings subject to constraints.

    Parameters:
        aTriangle: a Triangle instance
            The graph on which to carry out the search
        start: string
            Building number at which to start
        end: string
            line number at which to end
        path: list 
            Represents the current path of nodes being traversed.
            composed of tuples (i,j) 
            where i is the index of the outer list of aTriangle
            where i is the index of the inner  list of aTriangle
        best_value: int
            Largest value for a path
        best_path: list of strings
            The shortest path found so far between the original start
            and end node.

    Returns:
        A tuple with the shortest-path from start to end, represented by
        a list of building numbers (in strings), [n_1, n_2, ..., n_k],
        where there exists an edge from n_i to n_(i+1) in digraph,
        for all 1 <= i < k and the distance of that path.

        If there exists no path that satisfies max_total_dist and
        max_dist_outdoors constraints, then return None.
    """
    #add previous step to path
    path = path + [start]
    #if in last row of aTriangle, end this recursive call
    if len(path) == len(aTriangle):
        return path
    #find two next possible steps
    last_step_of_path = path[-1]
    possible_next_steps = (last_step_of_path[0]+1,last_step_of_path[1]) , (last_step_of_path[0]+1,last_step_of_path[1]+1)
    #recursively take each possible next step
    for step in possible_next_steps:
        if (best_path == None) or (calcTriangleSum(getTriangleValues(aTriangle,path)) < best_value):
            new_path = getBestPathValue(aTriangle, step, path, best_value, best_path) 
            new_value = calcTriangleSum(getTriangleValues(aTriangle,new_path))
        #test if new_path is better than previous best_path
        if (best_path == None) or (best_value == None) or (new_value > best_value):
            best_value = calcTriangleSum(getTriangleValues(aTriangle,new_path))
            best_path = new_path
    return best_path

def innitiateGetBestPathValue(aTriangle):
    """used to start the get_shortest_path recursive function"""
    return getBestPathValue(aTriangle, (0,0), [], None, None)

# test_triangle = ((makeTriangle("ProjectEulerProblem18TestTriangle.txt")))
# Euler_triangle = ((makeTriangle("ProjectEulerProblem18.txt")))
# print(test_triangle[0][0])
# print(getBestPathValue(test_triangle, None, None, [1,2,3], None, None))
# print(innitiateGetBestPathValue(test_triangle))
# print(test_triangle)
# test_path = [(0,0),(1,0),(2,2)]
# print(test_path)
# print(getTriangleValues(test_triangle,test_path))
# print("----------------")
# print(getTriangleValues(test_triangle,test_path))
# print(calcTriangleSum(getTriangleValues(test_triangle,test_path)))
# print(innitiateGetBestPathValue(Euler_triangle))
# print(calcTriangleSum(getTriangleValues(Euler_triangle,innitiateGetBestPathValue(Euler_triangle))))

"""
problem 19
You are given the following information, but you may prefer to do some research for yourself.

1 Jan 1900 was a Monday.

Thirty days has September, April, June and November.
All the rest have thirty-one,
Saving February alone, Which has twenty-eight, rain or shine. And on leap years, twenty-nine.

A leap year occurs on any year evenly divisible by 4, 
but not on a century, unless it is divisible by 400.

How many Sundays fell on the first of the month during the twentieth century 
(1 Jan 1901 to 31 Dec 2000)?
"""

class centuryDay (object):
    
    def __init__(self, year, month, day_of_month):
        """ 
        represents a day in the a century (e.g. jan 1 1900 to dec 31 1999)
        assumes year is an int representing the year (e.g. 1900)
        assumes month is an int representing the month (e.g. 1 for January, 12 for December)
        assumes day_of_month is an int, representing the day of the month (e.g. 1 for the 1st)
        assumes day_of_century is an int, representing the day of the century, starting at 1 (e.g. 1 is January 1st 1900, 368 is January 2nd 1901)
        assumes weekday is a string, representing the day of the week (e.g. sunday)
        if a value is None, it has not yet been assigned
        """
        self.year = year
        self.month = month
        self.day_of_month = day_of_month
        self.day_of_century = None
        self.weekday = None 
        
    def getYear(self):
        return self.year 
    
    def getMonth(self):
        return self.month
    
    def getDay_of_month(self):
        return self.day_of_month
    
    def getDay_of_century(self):
        return self.day_of_century()
    
    def getWeekday(self):
        return self.weekday()
    
    def setDay_of_century(self, day_of_century):
        self.day_of_century = day_of_century
    
    def setWeekday(self, day_of_century):
        if day_of_century % 7 == 0:
            self.weekday = "sunday"
        if day_of_century % 7 == 1:
            self.weekday ="monday"
        if day_of_century % 7 == 2:
            self.weekday = "tuesday"
        if day_of_century % 7 == 3:
            self.weekday = "wednesday"
        if day_of_century % 7 == 4:
            self.weekday = "thursday"
        if day_of_century % 7 == 5:
            self.weekday = "friday"
        if day_of_century % 7 == 6:
            self.weekday = "saterday"
            
    def __str__(self):
        """returns a representation of a centuryDay object, in the date format
        "day month year"
        e.g. "1.1.1900" for the 1st of january 1900
        """
        return str(self.day_of_month) + "." + str(self.month) + "." + str(self.year) + ".." + str(self.day_of_century) + "." + str(self.weekday)
    
    def __repr__(self,verbose = True):
        """returns a representation of a centuryDay object, 
        if verbose == False, in the date format "day.month.year"
        e.g. "1.1.1900" for the 1st of january 1900
        if verbose == True, in the date format "day.month.year..day_of_century.weekday"
        e.g. "1.1.1900..1.monday" for the 1st of january 1900
        """
        if verbose == True:
            return str(self.day_of_month) + "." + str(self.month) + "." + str(self.year) + ".." + str(self.day_of_century) + "." + str(self.weekday)
        else:
            return str(self.day_of_month) + "." + str(self.month) + "." + str(self.year)
        
def buildDaysofYear(year):
    """assumes year is an int representing a year (e.g. 1900)
    """
    #build list of ints representing number of days, for each month
    January = list(range(1,32))
    #figure out if leap year
    # pdb.set_trace()
    if (year % 4 == 0):
        leap_year = True
        if (year % 100 == 0):
            leap_year = False
            if (year % 400 == 0):
                leap_year = True
    else:
        leap_year = False
    if leap_year == True:
        February = list(range(1,30))
    else:
        February = list(range(1,29))
    March = list(range(1,32))
    April =list(range(1,31))
    May = list(range(1,32))
    June = list(range(1,31))
    July = list(range(1,32))
    August = list(range(1,32))
    September = list(range(1,31))
    October = list(range(1,32))
    November = list(range(1,31))
    December = list(range(1,32))
    
    #make list of month lists
    months_list = [January, February,March,April,May,June,July,August, September,October,November,December]

    return months_list
    
# buildDaysofYear(1900)

def isLeapYear(YearRange):
    """assumes YearRange is a range object of format range(startyear,endyear+1)
    returns a list of tuples, each composed of (year, boolean)
    where the boolean is True if the year is a leap year (FEBRUARY IS 29 DAYS LONG), 
    False if the year is not a leap year (FEBRUARY IS 28 DAYS LONG)
    """
    leap_list = []
    for year in YearRange:
        year_list = buildDaysofYear(year)
        len_february = (len(year_list[1]))
        if len_february == 28:
            is_leap = False
        else:
            is_leap = True
        leap_list.append((year,is_leap))
    print(leap_list)
    
    
# isLeapYear(range(1900,1905))

def findFirstSundays():
    """
    returns a list of centuryDays objects, representing the ~36525 days of the 20th century
    assumes January 1st 1900 is a monday
    assumes January 1st 1900 is the 1st day of the millenium
    """
    #innitialize 
    centuryDays_list = []
    #build centuryDays_list 
    for year in range(1900,2000): #TODO change to proper range
        month_num = 1
        for month in buildDaysofYear(year):
            for day in month:
                acenturyDay = centuryDay(year, month_num, day)
                centuryDays_list.append(acenturyDay)
            month_num += 1
    #innitialize day_of_century and sundays_on_1st
    day_of_century = 1
    sundays_on_1st = 0
    # iterate over days of the century
    for day in centuryDays_list:
        #assign day_of_century and weekday to each centuryDays
        day.setDay_of_century(day_of_century)
        day.setWeekday(day_of_century)
        #find how many days are 1st of month and sunday
        if (day.day_of_month == 1) and (day.weekday == "sunday"):
            sundays_on_1st +=1
            print(day)
        day_of_century += 1
    return sundays_on_1st
        
        
# print(findFirstSundays())
        
"""
problem 20

n! means n × (n − 1) × ... × 3 × 2 × 1

For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.

Find the sum of the digits in the number 100!
"""

def sumFactorialDigits(num):
    """assumes num is an int >= 0
    returns an int, the sum of the digits of the factorial of num
    e.g. sunFactorialDigits(10) returns 27,
    because 10! = 3628800 --> 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27
    """
    #get math.factorual(num)
    #convert num to string to list
    #sum(list)
    factorial = math.factorial(num)
    factorial_digit_list = list(str(factorial))
    factorial_digit_list = [int(i) for i in factorial_digit_list]
    return sum(factorial_digit_list)
    
# print(sumFactorialDigits(100))






















